import board
import neopixel
from math import ceil

class LEDMatrix(neopixel.NeoPixel):
    translation_table = [
        [119, 120, 121, 122, 123, 124, 125, 126,(0, 1, 2)],
        [118, 117, 116, 115, 114, 113, 112, 111,(3, 4)],
        [103, 104, 105, 106, 107, 108, 109, 110,(5, 6, 7)],
        [102, 101, 100,  99,  98,  97,  96,  95,(8, 9)],
        [ 87,  88,  89,  90,  91,  92,  93,  94,(10, 11, 12)],
        [ 86,  85,  84,  83,  82,  81,  80,  79,(13, 14, 15)],
        [ 71,  72,  73,  74,  75,  76,  77,  78,(16, 17)],
        [ 70,  69,  68,  67,  66,  65,  64,  63,(18, 19, 20)],
        [ 55,  56,  57,  58,  59,  60,  61,  62,(21, 22)],
        [ 54,  53,  52,  51,  50,  49,  48,  47,(23, 24, 25)],
        [ 39,  40,  41,  42,  43,  44,  45,  46,(26, 27)],
        [ 38,  37,  36,  35,  34,  33,  32,  31,(28, 29, 30)],
        [246, 247, 248, 249, 250, 251, 252, 253,(127, 128, 129)],
        [245, 244, 243, 242, 241, 240, 239, 238,(130, 131)],
        [230, 231, 232, 233, 234, 235, 236, 237,(132, 133, 134)],
        [229, 228, 227, 226, 225, 224, 223, 222,(135, 136)],
        [214, 215, 216, 217, 218, 219, 220, 221,(137, 138, 139)],
        [213, 212, 211, 210, 209, 208, 207, 206,(140, 141, 142)],
        [198, 199, 200, 201, 202, 203, 204, 205,(143, 144)],
        [197, 196, 195, 194, 193, 192, 191, 190,(145, 146, 147)],
        [182, 183, 184, 185, 186, 187, 188, 189,(148, 149)],
        [181, 180, 179, 178, 177, 176, 175, 174,(150, 151, 152)],
        [166, 167, 168, 169, 170, 171, 172, 173,(153, 154)],
        [165, 164, 163, 162, 161, 160, 159, 158,(155, 156, 157)],
        [373, 374, 375, 376, 377, 378, 379, 380,(254, 255, 256)],
        [372, 371, 370, 369, 368, 367, 366, 365,(257, 258)],
        [357, 358, 359, 360, 361, 362, 363, 364,(259, 260, 261)],
        [356, 355, 354, 353, 352, 351, 350, 349,(262, 263)],
        [341, 342, 343, 344, 345, 346, 347, 348,(264, 265, 266)],
        [340, 339, 338, 337, 336, 335, 334, 333,(267, 268, 269)],
        [325, 326, 327, 328, 329, 330, 331, 332,(270, 271)],
        [324, 323, 322, 321, 320, 319, 318, 317,(272, 273, 274)],
        [309, 310, 311, 312, 313, 314, 315, 316,(275, 276)],
        [308, 307, 306, 305, 304, 303, 302, 301,(277, 278, 279)],
        [293, 294, 295, 296, 297, 298, 299, 300,(280, 281)],
        [292, 291, 290, 289, 288, 287, 286, 285,(282, 283, 284)],
        [500, 501, 502, 503, 504, 505, 506, 507,(381, 382, 383)],
        [499, 498, 497, 496, 495, 494, 493, 492,(384, 385)],
        [484, 485, 486, 487, 488, 489, 490, 491,(386, 387, 388)],
        [483, 482, 481, 480, 479, 478, 477, 476,(389, 390)],
        [468, 469, 470, 471, 472, 473, 474, 475,(391, 392, 393)],
        [467, 466, 465, 464, 463, 462, 461, 460,(394, 395, 396)],
        [452, 453, 454, 455, 456, 457, 458, 459,(397, 398)],
        [451, 450, 449, 448, 447, 446, 445, 444,(399, 400, 401)],
        [436, 437, 438, 439, 440, 441, 442, 443,(402, 403)],
        [435, 434, 433, 432, 431, 430, 429, 428,(404, 405, 406)],
        [420, 421, 422, 423, 424, 425, 426, 427,(407, 408)],
        [419, 418, 417, 416, 415, 414, 413, 412,(409, 410, 411)],
        [627, 628, 629, 630, 631, 632, 633, 634,(508, 509, 510)],
        [626, 625, 624, 623, 622, 621, 620, 619,(511, 512)],
        [611, 612, 613, 614, 615, 616, 617, 618,(513, 514, 515)],
        [610, 609, 608, 607, 606, 605, 604, 603,(516, 517)],
        [595, 596, 597, 598, 599, 600, 601, 602,(518, 519, 520)],
        [594, 593, 592, 591, 590, 589, 588, 587,(521, 522, 523)],
        [579, 580, 581, 582, 583, 584, 585, 586,(524, 525)],
        [578, 577, 576, 575, 574, 573, 572, 571,(526, 527, 528)],
        [563, 564, 565, 566, 567, 568, 569, 570,(529, 530)],
        [562, 561, 560, 559, 558, 557, 556, 555,(531, 532, 533)],
        [547, 548, 549, 550, 551, 552, 553, 554,(534, 535)],
        [546, 545, 544, 543, 542, 541, 540, 539,(536, 537, 538)],
    ]

    def __init__(
        self,
        pin = board.D21,
        n: int = 127*5,
        brightness: float = 1.0,
        auto_write: bool = False,
        key_offset: int = 0
    ):
        super().__init__(
            pin = pin,
            n = n,
            brightness = brightness,
            auto_write = auto_write
        )
        self.key_offset = key_offset
        
    def _set_item(
        self, coords: tuple, *args
    ):
        if isinstance(coords, tuple):
            key_col, row = coords
            key_col -= self.key_offset
            if row == 'key':
                row = -1
            index = self.translation_table[key_col][row]
            if isinstance(index, tuple):
                for i in index:
                    super()._set_item(i, *args)
            else:
                super()._set_item(index, *args)
        else:
            super()._set_item(coords, *args)

    def __getitem__(self, coords: tuple):
        if isinstance(coords, tuple):
            key_col, row = coords
            key_col -= self.key_offset
            if row == 'key':
                row = -1
            index = self.translation_table[key_col][row]
            if isinstance(index, tuple):
                return super().__getitem__(index[0])
            else:
                return super().__getitem__(index)
        else:
            return super().__getitem__(coords)

    def average_pixel(self, coords: tuple, rgb, weight = 1.0):
        current_color = self[coords]
        new_color = [
           ceil((current_color[0] + rgb[0] * weight)/2),
           ceil((current_color[1] + rgb[1] * weight)/2),
           ceil((current_color[2] + rgb[2] * weight)/2),
        ]
        new_color = [max(2,c) if c != 0 else 0 for c in new_color ]
        self[coords] = new_color



    def clear(self):
        self.fill((0,0,0))
            


if __name__ == '__main__':
    matrix = LEDMatrix(brightness=0.5, auto_write=True)
   
    matrix[0,0] = (255,255,255)
    matrix[0,'key'] = (255,0,0)
    matrix.show()